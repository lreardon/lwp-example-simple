{"version":3,"sources":["lwp-example-simple.litcoffee"],"names":["setAppName","addHelpMenuSourceCodeLink","window","helpAboutText","groupTypes","name","text","imageHTML","openImageHTML","closeImageHTML","tagContents","group","ref","contentAsText","length","contentsChanged","firstTime","console","log","deleted"],"mappings":"AA+BIA,WAAW,cAOXC,0BACI,+DAIJC,OAAOC,cACH,sLAmBJD,OAAOE,aACHC,KAAO,WACPC,KAAO,wBACPC,UAAY,MACZC,cAAgB,IAChBC,eAAiB,IAUjBC,YAAc,SAAEC,GACZ,IAAAC,SAAE,OAAAA,EAAAD,EAAAE,iBAAAD,EAAwBE,YAAA,GAAO,eAYrCC,gBAAkB,SAAEJ,EAAOK,UACvBC,QAAQC,IAAI,2BAA4BP,EAAME,kBAalDM,QAAU,SAAER,UACRM,QAAQC,IAAI,0BAA2BP","file":"lwp-example-simple.js","sourcesContent":["\n# Lurch Web Platform, Simple Example Application\n\n## Overview\n\nThis source code file defines a very simple application built on the\n[Lurch Web Platform](https://github.com/lurchmath/lurch) (LWP).\nConsider this the \"hello world\") of the LWP.  Once you understand this\nsimple example, feel free to browse some of the other examples in\n[the Lurch Project's GitHub space](https://github.com/lurchmath).\n\n[See a live version of the result\nhere.](https://lurchmath.github.io/lwp-example-simple/)\n\nTwo files make up this example.  This one is the more important of the two.\nThe other is the [index.html](index.html) file, which just loads various\nscripts, includin the LWP and this file, among others.\n\nTo make your own app, you can duplicate these same two files, and customize\nthem to the needs of your app.  You may need a\n[simple build process](gulpfile.litcoffee) to compile\n[CoffeeScript](http://www.coffeescript.org) source like this into\nJavaScript, or you can just write in JavaScript in the first place.\n\nNow, the code:\n\n## Set the app name\n\nThe LWP provides a function to set the app name, for in the browser's/tab's\ntitle bar.  Call it like so:\n\n    setAppName 'ExampleApp'\n\n## Add a help menu item\n\nWe want the app itself to link to this documented source code file, so that\nusers who stumble upon the app can easily find its documentation.\n\n    addHelpMenuSourceCodeLink \\\n        'lwp-example-simple/blob/master/lwp-example-simple.litcoffee'\n\nWe also change the Help/About menu item to be specific to this demo app.\n\n    window.helpAboutText =\n        '<p>See the fully documented <a target=\"top\"\n        href=\"https://github.com/lurchmath/lwp-example-simple/blob/master/lwp-example-simple.litcoffee\"\n        >source code for this demo app</a>.</p>'\n\n## Define one group type\n\nIn the LWP, \"groups\" are the way users mark up a document to give it some\nmeaning.  They are shown in the UI as bubbles around the marked text.\n\nWe assign to a global variable the array of group types we'd like to have in\nthis application.  The LWP setup process looks for this global variable and,\nif it exists, uses its settings in place of the simple defaults.\n\nIn this app, we will make just one group type.  It shows up as a button on\nthe app's toolbar with an icon that looks like two brackets, `[ ]`, because\nsuch an icon will be generated from the `imageHTML` attribute provided\nbelow.  The open and close variants are used in the document to delimit\ngroup boundaries.\n\n    window.groupTypes = [\n        name : 'reporter'\n        text : 'Simple Event Reporter'\n        imageHTML : '[ ]'\n        openImageHTML : '['\n        closeImageHTML : ']'\n\nThe `tagContents` function is called on a group whenever that group is about\nto have its bubble drawn, and the result is placed in the bubble tag.  This\nfunction should be fast to compute, since it will be run often.  Usually it\njust reports the (stored) results of previously-executed computations.\n\nIn this app, bubble tags are very simple:  They report how many characters\nare in the group, just as an example.\n\n        tagContents : ( group ) ->\n            \"#{group.contentAsText()?.length} characters\"\n\nThe `contentsChanged` function is called on a group whenever that group just\nhad its contents changed.  The `firstTime` parameter is true when the group\nwas just constructed, and false every time thereafter; if an app needs to do\nany particular initialization of newly constructed groups, it can check the\n`firstTime` parameter and respond accordingly.\n\nIn this simple app, we just write to the browser console a notification that\nthe group's contents have changed.  Open your browser console to see\nnotifications stream by as you type text inside a group.\n\n        contentsChanged : ( group, firstTime ) ->\n            console.log 'This group just changed:', group.contentAsText()\n\nThe `deleted` function is called on a group immediately after it has been\nremoved from the document (for example, by the user deleting one or both of\nits endpoints).  The group does not exist in the document at the time of\nthis function call.  Any finalization that may need to be done could be\nplaced in this function.  Because it is run in the UI thread, it should be\nrelatively fast.\n\nIn this simple app, we just write to the browser console a notification that\nthe group was deleted.  Open your browser console to see notifications\nappear whenever you delete a group.\n\n        deleted : ( group ) ->\n            console.log 'You deleted this group:', group\n    ]\n"]}