{"version":3,"sources":["lwp-example-simple.litcoffee"],"names":["setAppName","addHelpMenuSourceCodeLink","window","helpAboutText","groupTypes","name","text","imageHTML","openImageHTML","closeImageHTML","tagContents","group","ref","contentAsText","length","contentsChanged","firstTime","console","log","deleted"],"mappings":"AAiCIA,WAAW,cAOXC,0BAA0B,qCAI1BC,OAAOC,cACH,oLAiBJD,OAAOE,aACHC,KAAO,WACPC,KAAO,wBACPC,UAAY,MACZC,cAAgB,IAChBC,eAAiB,IAUjBC,YAAc,SAAEC,GACZ,IAAAC,SAAE,OAAAA,EAAAD,EAAAE,iBAAAD,EAAwBE,YAAA,GAAO,eAYrCC,gBAAkB,SAAEJ,EAAOK,UACvBC,QAAQC,IAAI,2BAA4BP,EAAME,kBAalDM,QAAU,SAAER,UACRM,QAAQC,IAAI,0BAA2BP","file":"lwp-example-simple.js","sourcesContent":["\n# Simple Example webLurch Application\n\n## Overview\n\nThis explanation assumes that you  want to build an application in the Lurch\nWeb Platform (LWP).  [(What's the LWP?)](../README.md)\n\nThis file shows how to build an extremely simple application (like a \"hello\nworld\") in the LWP.  [See a live version of the result\nhere.](http://nathancarter.github.io/weblurch/app/simple-example.html)\n\nTwo files make up this example.  This one is more important.  The other is\n[simple-example.html](simple-example.html), which is almost entirely\nboilerplate code (as commented in its source), plus one line that imports\nthe compiled version of *this* file.\n\nTo make your own app, you will also need two files.\n * Make a copy of this file and modify its code to suit your needs.  Run\n   the [CoffeeScript](http://www.coffeescript.org) compiler on it to\n   generate JavaScript.\n * Make a copy of `simple-example.html`, and change one (clearly marked)\n   line to import your generated JavaScript.\n\nNow begins the code that defines this simple application. After this file,\nyou can [examine other examples](\nhttp://nathancarter.github.io/weblurch/app/index.html).\n\n## Set the app name\n\nThe LWP provides a single function to set the app name.  Call it like so.\nThe app name appears in the browser's/tab's title bar.\n\n    setAppName 'ExampleApp'\n\n## Add a help menu item\n\nWe want the app itself to link to this documented source code file, so that\nusers who stumble upon the app can easily find its documentation.\n\n    addHelpMenuSourceCodeLink 'app/simple-example-solo.litcoffee'\n\nWe also change the Help/About menu item to be specific to this demo app.\n\n    window.helpAboutText =\n        '<p>See the fully documented <a target=\"top\"\n        href=\"https://github.com/nathancarter/weblurch/blob/master/app/simple-example-solo.litcoffee\"\n        >source code for this demo app</a>.</p>'\n\n## Define one group type\n\nWe assign to a global variable the array of group types we'd like to have in\nour word processor.  The LWP setup process looks for this global variable,\nand, if it exists, respects its settings.  If it does not exist, a very\nsimple default setup is used instead.\n\nIn this case, we will make the array have length one, as we are adding just\none type.  You will see it show up as a button on the app's toolbar with an\nicon that looks like two brackets, `[ ]`, because such an icon will be\ngenerated from the `imageHTML` attribute provided below.  The open and close\nvariants are used in the document to delimit group boundaries.\n\n    window.groupTypes = [\n        name : 'reporter'\n        text : 'Simple Event Reporter'\n        imageHTML : '[ ]'\n        openImageHTML : '['\n        closeImageHTML : ']'\n\nThe `tagContents` function is called on a group whenever that group is about\nto have its bubble drawn, and the result is placed in the bubble tag.  This\nfunction should be fast to compute, since it will be run often.  Usually it\njust reports the (stored) results of previously-executed computations.\n\nIn this app, bubble tags are very simple:  They report how many characters\nare in the group.\n\n        tagContents : ( group ) ->\n            \"#{group.contentAsText()?.length} characters\"\n\nThe `contentsChanged` function is called on a group whenever that group just\nhad its contents changed.  The `firstTime` parameter is true when the group\nwas just constructed, and false every time thereafter; if an app needs to do\nany particular initialization of newly constructed groups, it can check the\n`firstTime` parameter and respond accordingly.\n\nIn this simple app, we just write to the browser console a notification that\nthe group's contents have changed.  Open your browser console to see\nnotifications stream by as you type inside a \"reporter\" group.\n\n        contentsChanged : ( group, firstTime ) ->\n            console.log 'This group just changed:', group.contentAsText()\n\nThe `deleted` function is called on a group immediately after it has been\nremoved from the document (for example, by the user deleting one or both of\nits endpoints).  The group does not exist in the document at the time of\nthis function call.  Any finalization that may need to be done could be\nplaced in this function.  Because it is run in the UI thread, it should be\nrelatively fast.\n\nIn this simple app, we just write to the browser console a notification that\nthe group was deleted.  Open your browser console to see notifications\nappear whenever you delete a \"reporter\" group.\n\n        deleted : ( group ) ->\n            console.log 'You deleted this group:', group\n    ]\n\nFunctions that need to do lengthy computations can run them in the\nbackground.  webLurch has a built-in mechanism to make this easy.  To see\nhow to use it, see\n[the more complex example application](complex-example-solo.litcoffee),\none of the [many examples](\nhttp://nathancarter.github.io/weblurch/app/index.html) available.\n"]}